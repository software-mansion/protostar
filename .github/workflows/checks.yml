name: Static analysis and tests

on:
  push:
    branches:
      - master
      - development
  pull_request:
  merge_group:
    branches:
      - master
  workflow_dispatch:

jobs:
  setup:
    name: Download deps, install poetry, populate caches
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install poetry, and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}
          poetry install
      - name: Install cairo bindings
        run: |
          poetry run poe install_cairo_bindings prod
      - name: Populate caches
        uses: actions/cache@v3
        with:
          path: | 
            ~/.cache/pypoetry
          key: poetry-${{ hashFiles('poetry.lock') }}

#  lint:
#    name: Check formatting, linting and types
#    runs-on: ubuntu-20.04
#    needs: setup
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ vars.PYTHON_VERSION }}
#      - name: Install poetry
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry==${{ vars.POETRY_VERSION }}
#      - name: Restore caches
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cache/pypoetry
#          key: poetry-${{ hashFiles('poetry.lock') }}
#
#      - name: Check types
#        run: |
#          poetry run poe type_check
#      - name: Check formatting with black
#        run: |
#          poetry run poe format_check
#      - name: Analyzing the code with pylint
#        run: |
#          poetry run poe lint

#  unit-and-integration-tests:
#    name: Unit and integration tests
#    runs-on: ubuntu-20.04
#    needs: setup
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ vars.PYTHON_VERSION }}
#      - name: Install poetry
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry==${{ vars.POETRY_VERSION }}
#        shell: bash
#      - name: Restore caches
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cache/pypoetry
#          key: poetry-${{ hashFiles('poetry.lock') }}
#
#      - name: Patch git config
#        run: |
#          git config --global protocol.file.allow always
#      - name: Unit tests
#        run: |
#          poetry run poe test_unit
#      - name: Integration tests
#        run: |
#          poetry run poe test_integration

  e2e-tests:
    name: End-to-end tests
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
          key: poetry-${{ hashFiles('poetry.lock') }}
      - name: Build
        run: |
          poetry run poe build
      - name: E2E tests
        run: |
          poetry run poe test_e2e

