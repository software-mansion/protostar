name: Static analysis and tests

on:
  push:
  pull_request:
  merge_group:
    branches:
      - master
  workflow_dispatch:

jobs:
  setup:
    name: Download deps, install poetry, populate caches
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install poetry, and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}
          poetry install
      - name: Install cairo bindings
        run: |
          poetry run poe install_cairo_bindings prod
      - name: Populate caches
        uses: actions/cache@v3
        with:
          path: | 
            ~/.cache/pypoetry
          key: poetry-${{ hashFiles('poetry.lock') }}
      - name: Install pre-release cairo-lang-0.11.1
        run: |
          poetry shell
          pip install --pre https://github.com/starkware-libs/cairo-lang/releases/download/v0.11.1a0/cairo-lang-0.11.1a0.zip

  lint:
    name: Check formatting, linting and types
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: | 
            ~/.cache/pypoetry
          key: poetry-${{ hashFiles('poetry.lock') }}
      - name: Install cairo bindings
        run: |
          poetry run ./scripts/install_cairo_bindings.sh

      - name: Check types
        run: |
          poetry run poe type_check
      - name: Check formatting with black
        run: |
          poetry run poe format_check
      - name: Analyzing the code with pylint
        run: |
          poetry run poe lint

  unit-and-integration-tests:
    name: Unit and integration tests
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}
        shell: bash
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
          key: poetry-${{ hashFiles('poetry.lock') }}
      - name: Install cairo bindings
        run: |
          poetry run ./scripts/install_cairo_bindings.sh

      - name: Patch git config
        run: |
          git config --global protocol.file.allow always
      - name: Unit tests
        run: |
          poetry run poe test_unit
      - name: Integration tests
        run: |
          poetry run poe test_integration

  e2e-tests:
    name: End-to-end tests
    runs-on: ubuntu-20.04
    needs: setup
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}
      - name: Restore caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
          key: poetry-${{ hashFiles('poetry.lock') }}
      - name: Install cairo bindings
        run: |
          poetry run ./scripts/install_cairo_bindings.sh
        shell: bash

      - name: Build
        run: |
          poetry run poe build
      - name: Install Scarb
      # TODO: improve to download latest release - maybe https://github.com/marketplace/actions/release-downloader
        run: |
          curl -L -o scarb.tar.gz \
          https://github.com/software-mansion/scarb/releases/download/v0.2.0-alpha.2/scarb-v0.2.0-alpha.2-x86_64-unknown-linux-gnu.tar.gz
          tar -xf scarb.tar.gz
          mv scarb-v0.2.0-alpha.2-x86_64-unknown-linux-gnu scarb
          echo "${GITHUB_WORKSPACE}/scarb/bin" >> $GITHUB_PATH
      - name: E2E tests
        run: |
          poetry run poe test_e2e

