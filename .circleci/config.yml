version: 2.1

orbs:
  gh: circleci/github-cli@2.2.0

parameters:
  poetry_version:
    type: string
    default: 1.4.2

  python_version:
    type: string
    default: 3.9.14

  # https://circleci.com/docs/using-macos/#supported-xcode-versions-silicon
  # https://circleci.com/docs/using-macos/#supported-xcode-versions-intel
  macos_xcode_version:
    type: string
    default: 14.2.0

  scarb_version:
    type: string
    default: 0.4.0

  node_version:
    type: string
    default: "16.20"

executors:
  linux:
    docker:
      - image: python:<< pipeline.parameters.python_version >>
  mac:
    macos:
      xcode: << pipeline.parameters.macos_xcode_version >>

  docs:
    docker:
      - image: cimg/node:<< pipeline.parameters.node_version >>

commands:
  install_python_and_gmp_mac:
    description: "Install specified python and poetry versions on mac executor"
    steps:
      - restore_cache:
          keys:
            - mac-python-gmp-<< pipeline.parameters.python_version >>
      - run:
          name: Install python and gmp
          command: |
            env PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install -s << pipeline.parameters.python_version >>
            pyenv global << pipeline.parameters.python_version >>
            HOMEBREW_NO_AUTO_UPDATE=1 brew install gmp patchelf
      - save_cache:
          key: mac-python-gmp-<< pipeline.parameters.python_version >>
          paths:
            - ~/.pyenv/versions/<< pipeline.parameters.python_version >>
            - /opt/homebrew/opt/gmp
            - /opt/homebrew/opt/patchelf

  install_linux_patchelf:
    description: "Install patchelf using pip"
    steps:
      - run:
          name: Install patchelf
          command: pip install patchelf

  ensure_poetry_version:
    description: "Install poetry"
    steps:
      - run:
          name: Install required poetry version
          command: |
            if ! poetry --version &> /dev/null || [[ $(poetry --version | awk '{print $NF}') != << pipeline.parameters.poetry_version >> ]]; then 
              pip3 install poetry==<< pipeline.parameters.poetry_version >>
            fi

  install_packages:
    description: "Install packages from lock file"
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    steps:
      - run:
          name: Install packages
          command: |
            poetry config installer.modern-installation false
            if [[ << parameters.platform >> == "mac" ]]; then
              CFLAGS=-I`brew --prefix gmp`/include LDFLAGS=-L`brew --prefix gmp`/lib poetry --no-ansi install
            else
              poetry --no-ansi install
            fi

  checkout_with_submodules:
    description: "Checkout code with submodules"
    steps:
      - checkout
      - run:
          name: Checkout code submodules
          command: |
            git submodule sync
            git submodule update --init

  install_rust:
    description: "Install rust"
    steps:
      - run:
          name: Install rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"
            source "$BASH_ENV"

  install_scarb:
    description: "Install scarb"
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Install scarb
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | bash -s -- -v << parameters.version >>
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
            source "$BASH_ENV"

  get_bindings_hashes:
    description: "Get submodule hash"
    steps:
      - run:
          name: Get submodule hash
          command: |
            git rev-parse HEAD:./cairo-protostar > /tmp/cairo-protostar-submodule-hash
            shasum scripts/install_cairo_bindings.sh >> /tmp/scripts-hash

  cairo_bindings_and_compiler:
    description: "Install cairo bindings"
    parameters:
      platform:
        default: linux
        type: enum
        enum: ["linux", "mac"]
    steps:
      - restore_cache:
          key: bindings-<< parameters.platform >>-{{ checksum "/tmp/scripts-hash" }}-{{ checksum "/tmp/cairo-protostar-submodule-hash" }}-<< pipeline.parameters.poetry_version >>-py<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install bindings and compile cairo-compile
          command: |
            if [ -f ./cairo-protostar/target/debug/cairo-compile ] && [ -d ./cairo-protostar/target/wheels ]; then
              pip install $(find ./cairo-protostar/target/wheels -maxdepth 1 -type f -iname "cairo_python_bindings*")
            else
              poetry run poe install_cairo_bindings prod
              poetry run poe install_cairo_bindings
              pushd cairo-protostar
              rustup override set nightly-2023-06-01
              cargo build --bin cairo-compile
              popd
            fi
      - save_cache:
          key: bindings-<< parameters.platform >>-{{ checksum "/tmp/scripts-hash" }}-{{ checksum "/tmp/cairo-protostar-submodule-hash" }}-<< pipeline.parameters.poetry_version >>-py<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
          paths:
            - ./cairo-protostar/target/debug/cairo-compile
            - ./cairo-protostar/target/wheels
      - patch_cairo_compiler

  patch_cairo_compiler:
    description: "Replace cairo_lang cairo compiler"
    steps:
      - run:
          name: Replace cairo_lang compiler
          command: |
            PY_VER=$(echo << pipeline.parameters.python_version >> | awk 'BEGIN{FS=OFS="."} NF--')
            cp cairo-protostar/target/debug/cairo-compile $(poetry env info -p)/lib/python$PY_VER/site-packages/starkware/starknet/compiler/v1/bin/starknet-sierra-compile
            chmod +x $(poetry env info -p)/lib/python$PY_VER/site-packages/starkware/starknet/compiler/v1/bin/starknet-sierra-compile

  setup:
    description: "Set up poetry, install deps and cairo bindings"
    parameters:
      platform:
        default: linux
        type: enum
        enum: ["linux", "mac"]
      scarb_version:
        type: string
        default: << pipeline.parameters.scarb_version >>
    steps:
      - when:
          condition:
            equal: ["mac", << parameters.platform >>]
          steps:
            - install_python_and_gmp_mac
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - install_linux_patchelf
      - ensure_poetry_version
      - install_rust
      - install_scarb:
          version: << parameters.scarb_version >>
      - checkout_with_submodules
      - get_bindings_hashes
      - restore_poetry_cache:
          platform: << parameters.platform >>
      - install_packages:
          platform: << parameters.platform >>
      - cairo_bindings_and_compiler:
          platform: << parameters.platform >>
      - save_poetry_cache:
          platform: << parameters.platform >>

  restore_poetry_cache:
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    steps:
      - restore_cache:
          key: poetry-<< pipeline.parameters.poetry_version >>-py<< pipeline.parameters.python_version >>-<< parameters.platform >>-{{ checksum "poetry.lock" }}-{{ checksum "/tmp/scripts-hash" }}-{{ checksum "/tmp/cairo-protostar-submodule-hash" }}

  save_poetry_cache:
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    steps:
      - save_cache:
          key: poetry-<< pipeline.parameters.poetry_version >>-py<< pipeline.parameters.python_version >>-<< parameters.platform >>-{{ checksum "poetry.lock" }}-{{ checksum "/tmp/scripts-hash" }}-{{ checksum "/tmp/cairo-protostar-submodule-hash" }}
          paths:
            - ~/.cache/pypoetry
            - ~/Library/Caches/pypoetry

  lint:
    description: "Type checks, formatting and linting"
    steps:
      - run:
          name: Run type check
          command: poetry run poe type_check
      - run:
          name: Run Format check
          command: poetry run poe format_check
      - run:
          name: Run linter
          command: poetry run poe lint

  lint_rust_runner:
    description: "Format and lint check of rust test runner"
    steps:
      - run:
          name: Run format check
          command: cargo fmt --check
          working_directory: ./protostar-rust
      - run:
          name: Run lint check
          command: cargo clippy --all-targets --all-features -- --no-deps -W clippy::pedantic -A clippy::missing_errors_doc -A clippy::missing_panics_doc -A clippy::default_trait_access
          working_directory: ./protostar-rust
          environment:
            RUSTFLAGS: -Dwarnings

  build:
    description: "Build protostar"
    steps:
      - run:
          name: Build protostar
          command: poetry run poe build

  pack:
    description: "Pack protostar for release"
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    steps:
      - run:
          name: Pack protostar
          command: tar -czvf protostar-<< parameters.platform >>.tar.gz ./dist/protostar

  run_unit_tests:
    description: "Run unit tests"
    steps:
      - run:
          command: |
            if [[ $(uname -s) == 'Darwin' ]]; then
              poetry run pytest protostar/*
            else
              poetry run pytest -n4 protostar/*
            fi

  run_integration_tests:
    description: "Run integration tests"
    steps:
      - run:
          name: Run integration tests
          command: |
            if [[ $(uname -s) == 'Darwin' ]]; then
              poetry run pytest --random-order scripts tests/integration
            else
              poetry run pytest -n4 --random-order scripts tests/integration
            fi


  run_e2e_tests:
    description: "Run unit tests"
    steps:
      - build
      - run:
          name: Run e2e tests
          command: |
            if [[ $(uname -s) == 'Darwin' ]]; then
              poetry run pytest tests/e2e
            else
              poetry run pytest -n4 tests/e2e
            fi

  run_test_runner_tests:
    description: "Run test of the rust test runner"
    steps:
      - run:
          name: Run test runner tests
          command: |
            cargo test
          working_directory: ./protostar-rust

  notify_about_failed_test:
    description: "Send slack notification about failed test on master"
    parameters:
      message:
        type: string
    steps:
      - when:
          condition:
            equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: Notify about failed test
                command: |
                  ./scripts/notify.sh "danger" \
                  "<< parameters.message >>" \
                  "*Committed by:*\n$CIRCLE_USERNAME\n\n*Url to failed test:*\n$CIRCLE_BUILD_URL" \
                  "$SLACK_URL"
                when: on_fail

jobs:
  code_quality:
    executor: linux
    steps:
      - setup
      - lint
      - notify_about_failed_test:
          message: "*Code quality checks have failed* :rotating_light:"
    
  rust_runner_code_quality:
    executor: linux
    steps:
      - setup:
          scarb_version: 0.5.0-alpha.1
      - lint_rust_runner

  rust_runner_tests:
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    executor: << parameters.platform >>
    steps:
      - setup:
          platform: << parameters.platform >>
          scarb_version: 0.5.0-alpha.1
      - run:
          name: Set git config
          command: git config --global protocol.file.allow always
      - run_test_runner_tests
      - notify_about_failed_test:
          message: "*Rust test runner tests have failed* :rotating_light:"

  unit_tests:
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    executor: << parameters.platform >>
    steps:
      - setup:
          platform: << parameters.platform >>
      - run:
          name: Set git config
          command: git config --global protocol.file.allow always
      - run_unit_tests
      - run_integration_tests
      - notify_about_failed_test:
          message: "*Unit tests have failed* :rotating_light:"

  e2e_tests:
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    executor: << parameters.platform >>
    steps:
      - setup:
          platform: << parameters.platform >>
      - run:
          name: Set git config
          command: git config --global protocol.file.allow always
      - run_e2e_tests
      - notify_about_failed_test:
          message: "*End to end tests have failed* :rotating_light:"

  pre_cache_mac_bindings_and_compiler:
    executor: mac
    steps:
      - setup:
          platform: mac

  build:
    parameters:
      platform:
        type: enum
        enum: ["linux", "mac"]
    executor: << parameters.platform >>
    steps:
      - setup:
          platform: << parameters.platform >>
      - build
      - pack:
          platform: << parameters.platform >>
      - run:
          name: Prepare workspace
          command: |
            mkdir -p /tmp/workspace
            if [[ << parameters.platform >> == 'mac' ]]; then
              SYSTEM_NAME="macOS"
            else
              SYSTEM_NAME="Linux"
            fi
            mv protostar-<< parameters.platform >>.tar.gz /tmp/workspace/protostar-$SYSTEM_NAME.tar.gz
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - protostar*

  send_test_release:
    executor: linux
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - store_artifacts:
          path: /tmp/workspace
          destination: protostar
      - checkout
      - run:
          name: Notify about ready test releases
          command: |
            links=$(curl -H "Circle-Token: $CIRCLE_TOKEN" \
            https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts | \
            grep "circle-artifacts" | awk -F '"' '{print $4}')
            ./scripts/notify.sh "warning" \
            "*New test release has just been published* :sunglasses:" \
            "*Requestor:*\n$CIRCLE_USERNAME\n\n*Download links:*\n$links" "$SLACK_URL"

  verify_valid_version:
    executor: linux
    steps:
      - checkout
      - run:
          name: Verify versions
          command: |
            build_version=$(grep pyproject.toml -e "^version =" | awk '{print $3}')
            released_versions=$(curl -s --fail https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases | grep "tag_name" | awk '{print $2}' | tr -d 'v,')
            mkdir -p /tmp/version
            echo "export VERSION=v$build_version" | tr -d '"' > /tmp/version/version
            echo "export RELEASED_VERSIONS=v$released_versions" | tr -d '"' > /tmp/version/released-versions
            source /tmp/version/version
            if echo "$released_versions" | grep -qF "$build_version"; then
              echo "Version $VERSION already released"
            else
              if [ "$CIRCLE_BRANCH" = "master" ]; then
                ./scripts/notify.sh "good" \
                "*New release is ready to be published* :protostar:" \
                "*Version to be released:*\n$VERSION\n\n*Link to workflow:*\nhttps://app.circleci.com/pipelines/workflows/$CIRCLE_WORKFLOW_ID" "$SLACK_URL"
              fi
            fi
      - persist_to_workspace:
          root: /tmp/version
          paths:
            - version
            - released-versions

  release:
    parameters:
      prerelease:
        type: boolean
    executor: linux
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - gh/setup
      - run:
          name: Release new version
          command: |
            source /tmp/workspace/version
            if grep -qF "$VERSION" /tmp/workspace/released-versions; then
              echo "Already released, cancelling release"
              curl --fail -X POST "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/cancel?circle-token=$CIRCLE_TOKEN"
              exit 0
            fi
            if [ << parameters.prerelease >> = true ]; then
              type="--prerelease"
              name="prerelease"
              preversion="$VERSION-pre-release"
            fi
            gh release create "${preversion:-$VERSION}" /tmp/workspace/*.tar.gz --title "${preversion:-$VERSION}" --repo "$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" $type
            ./scripts/notify.sh "good" \
            "*New ${name:-"release"} has just been published* :tada:" \
            "*Version:*\n$VERSION\n\n*Approver:*\n$CIRCLE_USERNAME" "$SLACK_URL"

  build_docs:
    executor: docs
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-docs-{{ checksum "website/yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn install
          working_directory: ./website
      - run:
          name: Build docs
          command: yarn build
          working_directory: ./website
      - save_cache:
          key: yarn-docs-{{ checksum "website/yarn.lock" }}
          paths:
            - ~/.cache/yarn

  patch_approval_check:
    parameters:
      approval_name:
        type: string
    executor: linux
    steps:
      - checkout
      - run:
          name: Install jq
          command: |
            apt update && apt install -y jq
      - run:
          name: Mark approval checks as successfull in PRs
          command: ./scripts/circle_patch_approvals.sh << parameters.approval_name >>

workflows:
  version: 2

  protostar:
    jobs:
      - code_quality
      - rust_runner_code_quality
      - pre_cache_mac_bindings_and_compiler:
          filters:
            branches:
              only:
                - master
      - rust_runner_tests:
          name: rust_runner_tests-linux
          platform: linux
          requires:
            - rust_runner_code_quality
      - unit_tests:
          name: unit_tests-linux
          platform: linux
          requires:
            - code_quality
      # - unit_tests:
      #     name: unit_tests-mac
      #     platform: mac
      #     requires:
      #       - pre_cache_mac_bindings_and_compiler
      #     filters:
      #       branches:
      #         only:
      #           - master
      - e2e_tests:
          name: e2e_tests-linux
          platform: linux
          requires:
            - code_quality
      # - e2e_tests:
      #     name: e2e_tests-mac
      #     platform: mac
      #     requires:
      #       - pre_cache_mac_bindings_and_compiler
      #     filters:
      #       branches:
      #         only:
      #           - master
      - build_docs
      - send_test_release_approval:
          type: approval
          requires:
            - code_quality
            - unit_tests-linux
            - e2e_tests-linux
            - rust_runner_tests-linux
          filters:
            branches:
              ignore:
                - master
      - patch_approval_check:
          name: patch_test_release_approval_status
          approval_name: send_test_release_approval
          requires:
            - code_quality
            - unit_tests-linux
            - e2e_tests-linux
            - rust_runner_tests-linux
          filters:
            branches:
              ignore:
                - master
      - build:
          name: build_test_release-linux
          platform: linux
          requires:
            - send_test_release_approval
          filters:
            branches:
              ignore:
                - master
      - build:
          name: build_test_release-mac
          platform: mac
          requires:
            - send_test_release_approval
          filters:
            branches:
              ignore:
                - master
      - send_test_release:
          requires:
            - build_test_release-linux
            - build_test_release-mac
          filters:
            branches:
              ignore:
                - master
      - verify_valid_version:
          name: verify_valid_version_branch
          requires:
            - code_quality
            - unit_tests-linux
            - e2e_tests-linux
            - rust_runner_tests-linux
          filters:
            branches:
              ignore:
                - master
      - verify_valid_version:
          name: verify_valid_version_master
          requires:
            - code_quality
            - unit_tests-linux
            - e2e_tests-linux
            - rust_runner_tests-linux
            # - unit_tests-mac
            # - e2e_tests-mac
          filters:
            branches:
              only:
                - master
      - release_approval:
          type: approval
          requires:
            - verify_valid_version_master
          filters:
            branches:
              only:
                - master
      - patch_approval_check:
          name: patch_release_approval_status
          approval_name: release_approval
          requires:
            - verify_valid_version_master
          filters:
            branches:
              only:
                - master
      - build:
          name: build_release-linux
          platform: linux
          requires:
            - release_approval
          filters:
            branches:
              only:
                - master
      - build:
          name: build_release-mac
          platform: mac
          requires:
            - release_approval
          filters:
            branches:
              only:
                - master
      - prerelease_approval:
          type: approval
          requires:
            - verify_valid_version_master
          filters:
            branches:
              only:
                - master
      - prerelease_from_branch_approval:
          type: approval
          requires:
            - verify_valid_version_branch
          filters:
            branches:
              ignore:
                - master
      - patch_approval_check:
          name: patch_prerelease_branch_approval_status
          approval_name: prerelease_from_branch_approval
          requires:
            - verify_valid_version_branch
      - patch_approval_check:
          name: patch_prerelease_master_approval_status
          approval_name: prerelease_approval
          requires:
            - verify_valid_version_master
      - build:
          name: build_prerelease_from_branch-linux
          platform: linux
          requires:
            - prerelease_from_branch_approval
          filters:
            branches:
              ignore:
                - master
      - build:
          name: build_prerelease_from_branch-mac
          platform: mac
          requires:
            - prerelease_from_branch_approval
          filters:
            branches:
              ignore:
                - master
      - build:
          name: build_prerelease-linux
          platform: linux
          requires:
            - prerelease_approval
          filters:
            branches:
              only:
                - master
      - build:
          name: build_prerelease-mac
          platform: mac
          requires:
            - prerelease_approval
          filters:
            branches:
              only:
                - master
      - release:
          name: make_release
          prerelease: false
          requires:
            - build_release-linux
            - build_release-mac
          filters:
            branches:
              only:
                - master
      - release:
          name: make_prerelease
          prerelease: true
          requires:
            - build_prerelease-linux
            - build_prerelease-mac
      - release:
          name: make_prerelease_from_branch
          prerelease: true
          requires:
            - build_prerelease_from_branch-linux
            - build_prerelease_from_branch-mac
